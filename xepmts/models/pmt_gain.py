# coding: utf-8

"""
    PMT API

    API for the XenonnT PMT database  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: joe.mosbacher@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PmtGain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pmt_no': 'int',
        'pmt_gain': 'float',
        'pmt_gain_err': 'float',
        'pmt_occup': 'float',
        'pmt_occup_err': 'float',
        'timestamp': 'int',
        'id': 'str'
    }

    attribute_map = {
        'pmt_no': 'pmt_no',
        'pmt_gain': 'pmt_gain',
        'pmt_gain_err': 'pmt_gain_err',
        'pmt_occup': 'pmt_occup',
        'pmt_occup_err': 'pmt_occup_err',
        'timestamp': 'timestamp',
        'id': '_id'
    }

    def __init__(self, pmt_no=None, pmt_gain=None, pmt_gain_err=None, pmt_occup=None, pmt_occup_err=None, timestamp=None, id=None):  # noqa: E501
        """PmtGain - a model defined in Swagger"""  # noqa: E501
        self._pmt_no = None
        self._pmt_gain = None
        self._pmt_gain_err = None
        self._pmt_occup = None
        self._pmt_occup_err = None
        self._timestamp = None
        self._id = None
        self.discriminator = None
        if pmt_no is not None:
            self.pmt_no = pmt_no
        if pmt_gain is not None:
            self.pmt_gain = pmt_gain
        if pmt_gain_err is not None:
            self.pmt_gain_err = pmt_gain_err
        if pmt_occup is not None:
            self.pmt_occup = pmt_occup
        if pmt_occup_err is not None:
            self.pmt_occup_err = pmt_occup_err
        if timestamp is not None:
            self.timestamp = timestamp
        if id is not None:
            self.id = id

    @property
    def pmt_no(self):
        """Gets the pmt_no of this PmtGain.  # noqa: E501


        :return: The pmt_no of this PmtGain.  # noqa: E501
        :rtype: int
        """
        return self._pmt_no

    @pmt_no.setter
    def pmt_no(self, pmt_no):
        """Sets the pmt_no of this PmtGain.


        :param pmt_no: The pmt_no of this PmtGain.  # noqa: E501
        :type: int
        """

        self._pmt_no = pmt_no

    @property
    def pmt_gain(self):
        """Gets the pmt_gain of this PmtGain.  # noqa: E501


        :return: The pmt_gain of this PmtGain.  # noqa: E501
        :rtype: float
        """
        return self._pmt_gain

    @pmt_gain.setter
    def pmt_gain(self, pmt_gain):
        """Sets the pmt_gain of this PmtGain.


        :param pmt_gain: The pmt_gain of this PmtGain.  # noqa: E501
        :type: float
        """

        self._pmt_gain = pmt_gain

    @property
    def pmt_gain_err(self):
        """Gets the pmt_gain_err of this PmtGain.  # noqa: E501


        :return: The pmt_gain_err of this PmtGain.  # noqa: E501
        :rtype: float
        """
        return self._pmt_gain_err

    @pmt_gain_err.setter
    def pmt_gain_err(self, pmt_gain_err):
        """Sets the pmt_gain_err of this PmtGain.


        :param pmt_gain_err: The pmt_gain_err of this PmtGain.  # noqa: E501
        :type: float
        """

        self._pmt_gain_err = pmt_gain_err

    @property
    def pmt_occup(self):
        """Gets the pmt_occup of this PmtGain.  # noqa: E501


        :return: The pmt_occup of this PmtGain.  # noqa: E501
        :rtype: float
        """
        return self._pmt_occup

    @pmt_occup.setter
    def pmt_occup(self, pmt_occup):
        """Sets the pmt_occup of this PmtGain.


        :param pmt_occup: The pmt_occup of this PmtGain.  # noqa: E501
        :type: float
        """

        self._pmt_occup = pmt_occup

    @property
    def pmt_occup_err(self):
        """Gets the pmt_occup_err of this PmtGain.  # noqa: E501


        :return: The pmt_occup_err of this PmtGain.  # noqa: E501
        :rtype: float
        """
        return self._pmt_occup_err

    @pmt_occup_err.setter
    def pmt_occup_err(self, pmt_occup_err):
        """Sets the pmt_occup_err of this PmtGain.


        :param pmt_occup_err: The pmt_occup_err of this PmtGain.  # noqa: E501
        :type: float
        """

        self._pmt_occup_err = pmt_occup_err

    @property
    def timestamp(self):
        """Gets the timestamp of this PmtGain.  # noqa: E501


        :return: The timestamp of this PmtGain.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PmtGain.


        :param timestamp: The timestamp of this PmtGain.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this PmtGain.  # noqa: E501


        :return: The id of this PmtGain.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PmtGain.


        :param id: The id of this PmtGain.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PmtGain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PmtGain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
